if PLATFORM = "Darwin" then
	setenv("LDFLAGS", '-L/usr/local/opt/libffi/lib')
	setenv("PKG_CONFIG_PATH", '/usr/local/opt/libffi/lib/pkgconfig')
end

CFLAGS := old + [
	"-march=native",
	"-std=gnu11", :>'--save-temps',
	"-fstrict-aliasing",
	"-foptimize-sibling-calls",
	"-Wall", "-Wstrict-aliasing",
	"-Wno-deprecated-declarations",
	"-Wno-unused-function",
	"-Werror=cast-function-type",
	:>"-Wsuggest-attribute=pure",
	:>"-Wsuggest-attribute=const",
	:>"-Wsuggest-attribute=noreturn",
	:>"-Wsuggest-attribute=malloc",
	'-I.', "-pthread",
	"-DGC_THREADS",
	"-D_GNU_SOURCE",
	'-D{PLATFORM}'
]
LDFLAGS := old + ["-lm"]

if defined("ANALYZER") then
	CFLAGS:put("-fanalyzer")
end

if defined("LTO") then
	CFLAGS:put("-flto")
	LDFLAGS:put("-flto")
end

if PLATFORM = "Linux" then
	CFLAGS:put("-fno-tree-loop-distribute-patterns")
end

if DEBUG then
	CFLAGS := old + ["-O1", "-g", "-DGC_DEBUG", "-DDEBUG"]
	LDFLAGS := old + ["-g"]
else
	CFLAGS := old + ["-O3", "-fexpensive-optimizations", "-g"]
	LDFLAGS := old + ["-g"]
end

PREBUILDS := old + [file("config.h")]
INIT_HEADERS := [file("ml_types.h")]

fun generate_init_file(Source) do
	let InitFile := Source:basename:replace(".c", "_init.c")
	let Target := file(InitFile)[Source, PREBUILDS, INIT_HEADERS] => fun() do
		Target:open("w"):close
		let Init := shell(CC, CFLAGS, "-E -P -DGENERATE_INIT", Source)
		let Out := Target:open("w")
		for Line in Init / "\n" do
			loop
				let I := while Line:find("INIT_CODE ")
				Line := Line[I + 10, 0]
				let J := while Line:find(");")
				Out:write(Line[1, J + 2])
				Out:write("\n")
				Line := Line[J + 2, 0]
			end
		end
		Out:close
	end
end

PARENT."generate_init_file" := generate_init_file

fun generate_init_files() do
	for Source in PATH:ls(".*\\.c") do
		Source:basename:find("_init") and next
		generate_init_file(Source)
	end
end

PARENT."generate_init_files" := generate_init_files

generate_init_files()

let Objects := [
	file("ml_compiler.o"),
	file("ml_opcodes.o"),
	file("ml_bytecode.o"),
	file("ml_runtime.o"),
	file("ml_types.o"),
	file("ml_string.o"),
	file("ml_method.o"),
	file("ml_list.o"),
	file("ml_map.o"),
	file("ml_sequence.o"),
	file("sha256.o"),
	file("stringmap.o"),
	file("inthash.o"),
	file("ml_console.o"),
	file("ml_debugger.o"),
	file("ml_object.o"),
	file("ml_file.o")
]

let Libraries := []

let InstallHeaders := [
	"minilang.h",
	"config.h",
	"ml_console.h",
	"ml_sequence.h",
	"ml_macros.h",
	"ml_types.h",
	"ml_object.h",
	"ml_compiler.h",
	"ml_runtime.h",
	"ml_opcodes.h",
	"ml_bytecode.h",
	"stringmap.h",
	"inthash.h",
	"ml_file.h"
]

if MINILANG_STATICGC or defined("STATICGC") then
	let Dir := file("gc")
	let Lib := file("gc/.libs/libgc.a") => fun(Lib) do
		Dir:rmdir:mkdir:chdir
		execute("wget https://github.com/ivmai/bdwgc/releases/download/v8.2.0/gc-8.2.0.tar.gz -O- | tar xvzP --strip-components=1")
		execute('CC={CC} ./configure', {
			"--prefix" is PATH,
			"--enable-static",
			"--disable-shared",
			"--disable-parallel-mark",
			"--enable-threads=pthreads",
			"--enable-mmap",
			:>"--enable-redirect-malloc",
			"--enable-large-config"
		})
		execute("make clean")
		execute("make -j4")
	end
	PREBUILDS := old + [Lib]
	CFLAGS := old + ['-I{Dir/"includes"}']
	LDFLAGS := old + ['-L{Dir/".libs"}', '-pthread']
end

if MINILANG_DEFAULTS or defined("DEFAULTS") then
	MINILANG_TABLES := 1
	MINILANG_MATH := 1
	MINILANG_COMPLEX := 1
	:>MINILANG_GIR := 1
	MINILANG_CBOR := 1
	MINILANG_JSON := 1
	MINILANG_XML := 1
	MINILANG_MODULES := not defined("NOSCHEDULER")
	MINILANG_SCHEDULER := not defined("NOSCHEDULER")
	MINILANG_TRE := 1
	MINILANG_GENERICS := not defined("NOGENERICS")
	MINILANG_QUEUES := 1
	MINILANG_TIME := 1
	MINILANG_UUID := 1
	if PLATFORM = "Linux" and MACHINE = "x86_64" then
		MINILANG_NANBOXING := not defined("NONANBOXING")
	end 
end

MINILANG_TABLES := old or defined("TABLES")
MINILANG_MATH := MINILANG_TABLES or old or defined("MATH")
MINILANG_COMPLEX := old or defined("COMPLEX")
MINILANG_IO := old or defined("IO")
MINILANG_GIR := old or defined("GIR")
MINILANG_CBOR := old or defined("CBOR")
MINILANG_JSON := old or defined("JSON")
MINILANG_XML := old or defined("XML")
MINILANG_XE := old or defined("XE")
MINILANG_MODULES := old or defined("MODULES")
MINILANG_SCHEDULER := MINILANG_MODULES or old or defined("SCHEDULER")
MINILANG_THREADS := old or defined("THREADS")
MINILANG_THREADSAFE := MINILANG_THREADS or old or defined("THREADSAFE")
MINILANG_JIT := old or defined("JIT")
MINILANG_NANBOXING := old or defined("NANBOXING")
MINILANG_TRE := old or defined("TRE")
MINILANG_GENERICS := old or defined("GENERICS")
MINILANG_QUEUES := old or defined("QUEUES")
MINILANG_TIME := old or defined("TIME")
MINILANG_UUID := old or defined("UUID")
MINILANG_LIBS := old or defined("LIBS")
MINILANG_BACKTRACE := old or defined("BACKTRACE")
MINILANG_JSENCODE := old or defined("JSENCODE")
MINILANG_SQLITE := old or defined("SQLITE")
MINILANG_RAPC := old or defined("RAPC")

MINILANG_GTK_CONSOLE := old or defined("GTK_CONSOLE")

file("config.h") => fun(Target) do
	let File := Target:open("w")
	File:write("#ifndef ML_CONFIG_H\n")
	File:write("#define ML_CONFIG_H\n")
	if MINILANG_MODULES then
		File:write("\n#define ML_MODULES\n")
	end
	if MINILANG_SCHEDULER then
		File:write("\n#define ML_SCHEDULER\n")
	end
	if MINILANG_NANBOXING then
		File:write("\n#define ML_NANBOXING\n")
	end
	if MINILANG_COMPLEX then
		File:write("\n#define ML_COMPLEX\n")
	end
	if MINILANG_GENERICS then
		File:write("\n#define ML_GENERICS\n")
	end
	if MINILANG_THREADSAFE then
		File:write("\n#define ML_THREADSAFE\n")
	end
	File:write("\n#endif")
	File:close
end

if MINILANG_TABLES then
	Objects:put(file("ml_table.o"))
	CFLAGS := old + ["-DML_TABLES"]
	InstallHeaders:put("ml_table.h")
end

if MINILANG_MATH then
	file("array"):mkdir
	Objects:put(
		file("ml_math.o"),
		file("ml_array.o"),
		file("array/update_set.o"),
		file("array/update_add.o"),
		file("array/update_sub.o"),
		file("array/update_mul.o"),
		file("array/update_div.o"),
		file("array/compare_eq.o"),
		file("array/compare_ne.o"),
		file("array/compare_lt.o"),
		file("array/compare_gt.o"),
		file("array/compare_le.o"),
		file("array/compare_ge.o")
	)
	CFLAGS := old + ["-DML_MATH"]
	InstallHeaders:put("ml_array.h")
	InstallHeaders:put("ml_math.h")
end

if MINILANG_IO then
	Objects:put(file("ml_io.o"))
	CFLAGS := old + ["-DML_IO"]
end

if MINILANG_GTK_CONSOLE then
	MINILANG_GIR := 1
	Objects:put(file("gtk_console.o"), file("gtk_console_completion.o"))
	CFLAGS := old + ["-DML_GTK_CONSOLE", pkgconfig("--cflags gtk+-3.0 gdk-pixbuf-2.0 gtksourceview-4")]
	LDFLAGS := old + [pkgconfig("--libs gtk+-3.0 gdk-pixbuf-2.0 gtksourceview-4")]
	InstallHeaders:put("gtk_console.h")
end

if MINILANG_GIR then
	Objects:put(file("ml_gir.o"))
	CFLAGS := old + ["-DML_GIR", pkgconfig("--cflags gobject-introspection-1.0")]
	LDFLAGS := old + [pkgconfig("--libs gobject-introspection-1.0")]
	InstallHeaders:put("ml_gir.h")
end

if MINILANG_CBOR then
	let Dir := PATH/"minicbor"
	Dir:exists or execute("git clone -b dev https://github.com/rajamukherji/minicbor.git", Dir)
	CFLAGS := old + [
		'-DMINICBOR_PREFIX=ml_cbor_',
		'-DMINICBOR_READ_FN_PREFIX=ml_cbor_read_',
		'-DMINICBOR_READDATA_TYPE=\"struct ml_cbor_reader_t *\"',
		 "-DML_CBOR"
	]
	Objects:put(
		file("ml_cbor.o"),
		file("minicbor/minicbor_reader.o"),
		file("minicbor/minicbor_writer.o")
	)
	InstallHeaders:put("ml_cbor.h")
end

if MINILANG_JSON then
	CFLAGS := old + ['-DML_JSON']
	LDFLAGS := old + ["-lyajl"]
	Objects:put(file("ml_json.o"))
	InstallHeaders:put("ml_json.h")
end

if MINILANG_XML then
	CFLAGS := old + ['-DML_XML']
	LDFLAGS := old + ["-lexpat"]
	Objects:put(file("ml_xml.o"))
	InstallHeaders:put("ml_xml.h")
end

if MINILANG_XE then
	CFLAGS := old + ['-DML_XE']
	Objects:put(file("ml_xe.o"))
	InstallHeaders:put("ml_xe.h")
end

if MINILANG_BACKTRACE then
	let Dir := PATH/"libbacktrace"
	let Lib := Dir / ".libs/libbacktrace.a" => fun() do
		Dir:rmdir
		execute("git clone https://github.com/ianlancetaylor/libbacktrace.git", Dir)
		Dir:chdir
		execute("./configure")
		execute("make clean")
		execute("make -j4")
	end
	PREBUILDS := old + [Lib]
	CFLAGS := old + ['-DML_BACKTRACE', '-I{Dir}']
	LDFLAGS := old + [Lib]
end

if MINILANG_MODULES then
	LDFLAGS := old + ["-ldl"]
	Objects:put(file("ml_module.o"), file("ml_library.o"), file("whereami.o"))
	InstallHeaders:put("ml_module.h")
end

if MINILANG_THREADS then
	CFLAGS := old + ['-DML_THREADS']
	LDFLAGS := old + ["-pthread"]
	Objects:put(file("ml_thread.o"))
	InstallHeaders:put("ml_thread.h")
end

if MINILANG_JIT then
	let Source := file("ml_bytecode_x64.dasc")
	file("ml_bytecode_x64.c")[Source] => fun(Target) do
		execute("lua5.2", file("dynasm/dynasm.lua"), "-o", Target, Source)
	end
	Objects:put(file("ml_bytecode_x64.o"))
	CFLAGS := old + ["-DML_JIT", "-I", Source:dirname]
	LDFLAGS := old + ["-lZydis"]
end

if PLATFORM = "Linux" and MACHINE = "x86_64" and CC != "clang" then
	Objects:put(file("inthash_x64.o"))
	CFLAGS := old + ["-DASM_INTHASH_SEARCH"]
end

if MINILANG_TRE then
	CFLAGS := old + ["-DML_TRE"]
	LDFLAGS := old + ["-ltre"]
end

if MINILANG_QUEUES then
	Objects:put(file("ml_queue.o"))
	CFLAGS := old + ["-DML_QUEUES"]
	InstallHeaders:put("ml_queue.h")
end

if MINILANG_TIME then
	Objects:put(file("ml_time.o"))
	CFLAGS := old + ["-DML_TIME"]
	InstallHeaders:put("ml_time.h")
end

if MINILANG_UUID then
	Objects:put(file("ml_uuid.o"))
	CFLAGS := old + ["-DML_UUID"]
	LDFLAGS := old + ["-luuid"]
	InstallHeaders:put("ml_uuid.h")
end

if MINILANG_JSENCODE then
	Objects:put(file("ml_jsencode.o"))
	CFLAGS := old + ["-DML_JSENCODE"]
	LDFLAGS := old + ["-ljansson"]
	InstallHeaders:put("ml_jsencode.h")
end

if MINILANG_SQLITE then
	Objects:put(file("ml_sqlite.o"))
	CFLAGS := old + ["-DML_SQLITE"]
	LDFLAGS := old + ["-lsqlite3"]
	InstallHeaders:put("ml_sqlite.h")
end

if MINILANG_RAPC then
	let Source := file("rapc.mini")
	fun build(Target) do
		let Input := Source:open("r")
		let Output := Target:open("w")
		Output:write("const char RapcSource[] = {\n\t")
		var N := 0
		loop
			let Line := while Input:read
			for Char in Line do
				Output:write('0x{Char:ord, 16},')
				N := N + 1
				if 16 | N then
					Output:write("\n\t")
				end
			end
		end
		Input:close
		Output:write("0\n};\n")
		Output:close
	end
	file("rapc_mini.c")[Source] => build
	Objects:put(file("ml_rapc.o"), file("rapc_mini.o"))
	CFLAGS := old + ["-DML_RAPC"]
	InstallHeaders:put("ml_rapc.h")
end

if PLATFORM = "Linux" then
	Objects:put(file("linenoise.o"))
	LDFLAGS := old + ["-lgc"]
elseif PLATFORM = "FreeBSD" then
	Objects:put(file("linenoise.o"))
	CFLAGS := old + ["-I/usr/local/include"]
	LDFLAGS := old + ["-L/usr/local/lib", "-lgc-threaded"]
elseif PLATFORM = "Darwin" then
	Objects:put(file("linenoise.o"))
	LDFLAGS := old + ["-lgc"]
elseif PLATFORM = "Mingw" then
end

LIBMINILANG := c_library(LIB_DIR/"libminilang.a", Objects, Libraries)
MINILANG := c_program(BIN_DIR/"minilang", [file("minilang.o")], [LIBMINILANG])
MINIPP := c_program(BIN_DIR/"minipp", [file("minipp.o")], [LIBMINILANG])
MINIXE := c_program(BIN_DIR/"minixe", [file("minixe.o")], [LIBMINILANG])

DEFAULT[LIBMINILANG, MINILANG, MINIPP, MINIXE]

PARENT."LIBMINILANG" := LIBMINILANG

let InstallBin := PREFIX/"bin"
let InstallInclude := PREFIX/"include/minilang"
let InstallLib := PREFIX/"lib"

install(MINILANG, InstallBin/"minilang", "+x")

for Header in InstallHeaders do
	install(file(Header), InstallInclude / Header)
end

install(LIBMINILANG, InstallLib/"libminilang.a")

if MINILANG_LIBS and PLATFORM = "Linux" then
	let Exports := file("exports.lst")
	MINILANG[Exports]
	LDFLAGS := old + ["-ldl", '-Wl,--dynamic-list={Exports}']
	subdir("lib")
end

subdir("test")
