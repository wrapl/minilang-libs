if PLATFORM = "Darwin" then
	setenv("LDFLAGS", '-L/usr/local/opt/libffi/lib')
	setenv("PKG_CONFIG_PATH", '/usr/local/opt/libffi/lib/pkgconfig')
end

MODULE_DIR := old or (LIB_DIR/"minilang"):mkdir

let InstallModules := PREFIX / "lib/minilang"

let SourceTypes := {
	"c" is [c_includes, c_compile],
	"cpp" is [c_includes, c_compile]
}

INIT_HEADERS := meta("MINILANG"):scan("INCLUDES") => fun() do
	var Lines := shell(CC, '-c', CFLAGS, '-M -MG', file("ml_test.c"))
	Lines := Lines:replace("\\\n ", "")
	Lines := Lines[Lines:find(": ") + 2, 0]:trim
	var Files := Lines / r"[^\\]( +)"
	for File in Files do
		File := file(File:replace("\\ ", " "))
	end
	check(Files)
	ret Files
end

fun generate_init_file(Source) do
	let InitFile := Source:basename:replace(".c", "_init.c")
	let Target := file(InitFile)[Source, PREBUILDS, INIT_HEADERS] => fun() do
		Target:open("w"):close
		let Init := shell(CC, CFLAGS, "-E -P -DGENERATE_INIT", Source)
		let Out := Target:open("w")
		for Line in Init / "\n" do
			loop
				let I := while Line:find("INIT_CODE ")
				Line := Line[I + 10, 0]
				let J := while Line:find(");")
				Out:write(Line[1, J + 2])
				Out:write("\n")
				Line := Line[J + 2, 0]
			end
		end
		Out:close
	end
end

let Exports := file("exports.lst")
let Modules := []

fun module(Name, File, Tags) do
	Modules:put((Name:before("."), File, []))
	if defined("INSTALL") then
		let Installed := (InstallModules / Name)[File] => fun(Target) do
			print(File, " -> ", Target, "\n")
			Target:dir:mkdir
			File:copy(Target)
		end
		Modules:put((Name:before("."), Installed, []))
	end
end

so_module := fun(Name, Objects, Libraries) do
	let Library := MODULE_DIR / Name
	let Sources := []
	for Object in Objects or [] do
		for Extension, Functions in SourceTypes do
			let Source := Object % Extension
			if Source:exists then
				Sources:put(Source)
				generate_init_file(Source)
				let Scan := Source:scan("INCLUDES")[PREBUILDS] => Functions[1]
				Object[Source, Scan] => (Functions[2] !! [Source])
				exit
			end
		end
	end
	Library[Objects, Libraries] => fun(Library) do
		Library:dir:mkdir
		execute('cc', '-o', Library, '-shared', '-export-dynamic', Objects, Libraries, LDFLAGS, '-Wl,--dynamic-list={Exports}')
		:>DEBUG or execute("strip", Library)
	end
	module(Name, Library, [])
end

mini_module := fun(Name) do
	let Library := MODULE_DIR / Name
	let Source := file((Name / "/")[-1])
	Library[Source] => fun(Target) do
		Target:dir:mkdir
		Source:copy(Target)
	end
	module(Name, Library, [])
end

CFLAGS := old + [
	"-march=native",
	"-std=gnu11", :>'--save-temps',
	"-fstrict-aliasing",
	"-foptimize-sibling-calls",
	"-Wall", "-Wstrict-aliasing",
	"-Wno-deprecated-declarations",
	"-Wno-unused-function",
	"-Werror=cast-function-type",
	:>"-Wsuggest-attribute=pure",
	:>"-Wsuggest-attribute=const",
	:>"-Wsuggest-attribute=noreturn",
	:>"-Wsuggest-attribute=malloc",
	'-I.', "-pthread",
	"-DGC_THREADS",
	"-D_GNU_SOURCE",
	'-D{PLATFORM}',
	"-fpic", "-I.."
]
LDFLAGS := old + ["-lm", "-ldl"]

DEBUG := defined("DEBUG")

if DEBUG then
	CFLAGS := old + ["-O2", "-g"]
	LDFLAGS := old + ["-g"]
else
	CFLAGS := old + ["-O3", "-g"]
	LDFLAGS := old + ["-g"]
end

for Path in file(""):ls do
	if Path / "build.rabs" exists () then
		subdir(Path:basename)
	end
end

context():parent:in(;) do
	let All := meta("all")
	let ByTag := {}
	for (Name, File, Tags) in Modules do
		:>print('Found module: {Name} -> {File}\n')
		let Meta := meta(Name)[File]
		All[Meta]
		:>print('\tMeta = {Meta:id}\n')
		for Tag in Tags do
			ByTag[Tag, meta][File]
		end
	end
end