so_module("db/sqlite.so", [file("sqlite.o")], Tags is ["standard"])

scope("dqlite";) do
	let RaftDir := file("raft")
	let RaftLib := RaftDir / ".libs/libraft.a" => fun() do
		RaftDir:rmdir:mkdir:chdir
		execute("wget https://github.com/canonical/raft/archive/refs/tags/v0.14.0.tar.gz -O- | tar xvzP --strip-components=1")
		execute("autoreconf -vfi")
		execute("./configure")
		execute("make -j8")
	end
	let Dir := file("dqlite")
	let Lib := Dir / ".libs/libdqlite.a" => fun() do
		Dir:rmdir:mkdir:chdir
		execute("wget https://github.com/canonical/dqlite/archive/refs/tags/v1.11.0.tar.gz -O- | tar xvzP --strip-components=1")
		execute("autoreconf -vfi")
		setenv("RAFT_CFLAGS", '-I{RaftDir/"include"}')
		setenv("RAFT_LIBS", '-L{RaftDir/".libs"}')
		execute("./configure")
		execute("make -j8 CFLAGS=-fpic")
	end
	Lib[RaftLib]
	PREBUILDS := old + [Lib]
	CFLAGS := old + ['-I{Dir/"include"}']
	so_module("db/dqlite.so", [file("dqlite.o")], [Lib])
end

:<scope("sqlite";) do
	file("sqlite/sqlite3.c") => fun() do
		file("sqlite"):rmdir:mkdir:chdir
		execute("wget https://www.sqlite.org/2021/sqlite-autoconf-3360000.tar.gz -O- | tar xvzP --strip-components=1")
	end
	PREBUILDS := old + [file("sqlite/sqlite3.c")]
	CFLAGS := old + ["-I", file("sqlite")]
	generate_init_file(file("ml_sqlite.c"))
	so_module("sqlite.so", [file("ml_sqlite.o"), file("sqlite/sqlite3.o")])
end>:

let RADB := scope("radb";) do
	let Dir := file("radb")
	let Lib := Dir / "libradb.a" => fun() do
		Dir:rmdir
		execute("git clone -b dev https://github.com/rajamukherji/radb.git", Dir)
		:>execute("cp -rv ~/Work/Radb", Dir)
		Dir:chdir
		execute("make clean")
		execute('make libradb.a RADB_MEM=GC CFLAGS=-fpic', DEBUG and "DEBUG=1")
	end
	PREBUILDS := old + [Lib]
	so_module("db/radb.so", [file("radb.o")], [Lib], Tags is ["standard"])
end

scope("ravs";) do
	let Dir := file("ravs")
	let Lib := Dir / "libravs.a" => fun() do
		Dir:rmdir
		execute("git clone --recursive -b dev https://github.com/rajamukherji/ravs.git", Dir)
		Dir:chdir
		execute("make clean")
		execute("make libravs.a RADB_MEM=GC CFLAGS=-fpic")
	end
	PREBUILDS := old + [Lib, RADB]
	so_module("db/ravs.so", [file("ravs.o")], [Lib])
end

scope("postgres";) do
	PGVERSION := expr('pg_config --version') => fun() do
		let Match := shell('pg_config --version') % r"PostgreSQL ([0-9]+)\.[0-9]+"
		ret '-DPG_VERSION={Match[2]}'
	end
	CFLAGS := old + [
		pkgconfig("--cflags gio-2.0"),
		expr('pg_config --includedir';) "-I" + shell('pg_config --includedir'):trim,
		expr('pg_config --includedir-server';) "-I" + shell('pg_config --includedir-server'):trim,
		PGVERSION
	]
	if defined("PG_PIPELINE") then
		CFLAGS:put("-DPG_PIPELINE")
	end
	LDFLAGS := old + [
		pkgconfig("--libs gio-2.0"),
		expr('pg_config --libdir') => fun() "-L" + shell('pg_config --libdir'):trim,
		"-lpq"
	]
	file("postgres.o")[PGVERSION]
	so_module("db/postgres.so", [file("postgres.o")], Tags is ["postgres"])
end


:<scope("fdb";) do
	LDFLAGS := old + [pkgconfig("--libs foundationdb-client")]
	so_module("db/fdb.so", [file("fdb.o")])
end>: