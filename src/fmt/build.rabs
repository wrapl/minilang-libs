so_module("fmt/csv.so", [file("csv.o"), file("libcsv.o")], Tags is ["standard"])

:<scope("html";) do
	let LEXBOR := file("lib/liblexbor_static.a") => fun() do
		file("lexbor"):rmdir:mkdir:chdir
		execute("wget -nv https://github.com/lexbor/lexbor/archive/refs/tags/v2.4.0.tar.gz -O- | tar xvzP --strip-components=1")
		execute('cmake -DCMAKE_INSTALL_PREFIX={PATH} -DCMAKE_BUILD_TYPE=Release -DLEXBOR_BUILD_SHARED=OFF -DLEXBOR_BUILD_STATIC=ON .')
		execute('make -j4 install')
	end
	PREBUILDS := old + [LEXBOR]
	CFLAGS := old + ['-I', PATH / "include"]
	so_module("fmt/html.so", [file("lexbor.o")], [LEXBOR], Tags is ["standard"])
end>:

scope("gumbo";) do
	let GUMBO := file("gumbo/src/gumbo.h") => fun() do
		file("gumbo"):rmdir:mkdir:chdir
		execute("wget -nv https://codeberg.org/grisha/gumbo-parser/archive/0.13.0.tar.gz -O- | tar xvzP --strip-components=1")
	end
	CFLAGS := old + ["-I", GUMBO:dir]
	let Objects := [
		file("gumbo/src/attribute.o"),
		file("gumbo/src/parser.o"),
		file("gumbo/src/tag.o"),
		file("gumbo/src/util.o"),
		file("gumbo/src/char_ref.o"),
		file("gumbo/src/string_buffer.o"),
		file("gumbo/src/tokenizer.o"),
		file("gumbo/src/vector.o"),
		file("gumbo/src/error.o"),
		file("gumbo/src/string_piece.o"),
		file("gumbo/src/utf8.o")
	]
	file("html.o")[GUMBO]
	for Object in Objects do
		(Object % "c")[GUMBO] => fun() nil
	end
	so_module("fmt/html.so", [file("html.o")]:grow(Objects), [], Tags is ["standard"])
end

scope("md4c";) do
	let MD4C := file("md4c/src/md4c.c") => fun() do
		file("md4c"):rmdir
		execute("git clone https://github.com/mity/md4c.git")
	end
	PREBUILDS := old + [MD4C]
	CFLAGS := old + ['-I{MD4C:dir}']
	so_module("fmt/markdown.so", [file("markdown.o")], [])
end